# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type DecoderItem {
  id: Int
  code: String!
  name: String
}

type Decoder {
  category: [DecoderItem!]!
  divisionCode: [DecoderItem!]!
}

type Event {
  userId: Int!
  id: Int!
  categoryId: Float
  name: String!
  location: String
  detail: String
  begin: DateTime!
  end: DateTime!
  isTemporary: Boolean!
  lastUpdate: DateTime!
  createdDate: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type EventUpsertResponse {
  id: Int!
}

type UserKey {
  id: ID!
}

type User {
  id: ID!
  position: PositionDef!
  theme: ThemeDef!
  givenName: String!
  familyName: String!
  givenKana: String
  familyKana: String
  email: String!
  password: String!
  division: String!
  iconPath: String
  iconName: String
  description: String
  isAdmin: Boolean!
  isStop: Boolean!
  lastUpdate: DateTime!
  attendees: String
  events: String
}

enum PositionDef {
  division
  unit
  gd
  member
}

enum ThemeDef {
  normal
  dark
}

type UserUpsertResponse {
  id: ID!
  email: String!
  password: String!
}

type UserLoginResponse {
  name: String
  userId: Float!
  email: String!
  isAdmin: Boolean!
}

type ChangePasswordResponse {
  userId: ID!
  status: ChangePasswordStatusDef!
}

enum ChangePasswordStatusDef {
  ng
  ok
}

type AttendeeKey {
  userId: ID!
  eventId: ID!
}

type Attendee {
  userId: ID!
  eventId: ID!
  lastUpdate: DateTime!
  createdDate: DateTime!
}

type AttendeeUserList {
  eventId: Int!
  userlist: [User!]!
}

type AttendEventList {
  userId: Int!
  eventList: [Event!]!
}

input EventInput {
  userId: Int!
  id: Int!
  categoryId: Float
  name: String!
  location: String
  detail: String
  begin: DateTime!
  end: DateTime!
  isTemporary: Boolean!
  lastUpdate: DateTime!
  createdDate: DateTime!
}

input UserKeyInput {
  id: ID!
}

input UserInput {
  id: ID!
  position: PositionDef!
  theme: ThemeDef!
  givenName: String!
  familyName: String!
  givenKana: String
  familyKana: String
  email: String!
  password: String!
  division: String!
  iconPath: String
  iconName: String
  description: String
  isAdmin: Boolean!
  isStop: Boolean!
  lastUpdate: DateTime!
  attendees: String
  events: String
}

input AttendeeKeyInput {
  userId: ID!
  eventId: ID!
}

input AttendeeInput {
  userId: ID!
  eventId: ID!
  lastUpdate: DateTime!
  createdDate: DateTime!
}

type Query {
  getUser(id: Int!): User!
  getUserListGroup: [[User!]!]!
  getEventAll: [Event!]!
  getEvent(eventId: Int!): Event!
  getEventList(params: EventUpsert): [Event!]!
  decoder: Decoder!
  getAttendee(params: AttendeeKeyInput!): Attendee!
  getAttendeeEventListByUserId(userId: Int!): AttendEventList!
  getAttendeeUserListByEventId(eventId: Int!): AttendeeUserList!
}

input EventUpsert {
  userId: Int
  id: Int
  categoryId: Float
  name: String
  location: String
  detail: String
  begin: DateTime
  end: DateTime
  isTemporary: Boolean
  lastUpdate: DateTime
  createdDate: DateTime
}

type Mutation {
  upsertUser(params: UserUpsert!): UserUpsertResponse!
  createUser(params: UserUpsert!): UserKey!
  login(params: UserLoginInput!): UserLoginResponse!
  changePassword(params: ChangePasswordInput!): ChangePasswordResponse!
  upsertEvent(params: EventUpsert!): EventUpsertResponse!
  createEvent(params: EventUpsert!): EventUpsertResponse!
  upsertAttendee(params: AttendeeKeyInput!): AttendeeKey!
  deleteAttendee(params: AttendeeKeyInput!): AttendeeKey!
}

input UserUpsert {
  id: ID
  position: PositionDef
  theme: ThemeDef
  givenName: String
  familyName: String
  givenKana: String
  familyKana: String
  email: String
  password: String
  division: String
  iconPath: String
  iconName: String
  description: String
  isAdmin: Boolean
  isStop: Boolean
  lastUpdate: DateTime
  attendees: String
  events: String
}

input UserLoginInput {
  email: String!
  password: String!
}

input ChangePasswordInput {
  email: String!
  currentPassword: String!
  newPassword: String!
}